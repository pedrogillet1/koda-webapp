
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('./runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.3
 * Query Engine version: bb420e667c1820a8c05a38023385f6cc7ef8e83a
 */
Prisma.prismaVersion = {
  client: "6.16.3",
  engine: "bb420e667c1820a8c05a38023385f6cc7ef8e83a"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  firstName: 'firstName',
  lastName: 'lastName',
  profileImage: 'profileImage',
  passwordHash: 'passwordHash',
  salt: 'salt',
  googleId: 'googleId',
  appleId: 'appleId',
  phoneNumber: 'phoneNumber',
  isEmailVerified: 'isEmailVerified',
  isPhoneVerified: 'isPhoneVerified',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  refreshTokenHash: 'refreshTokenHash',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt'
};

exports.Prisma.TwoFactorAuthScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  secret: 'secret',
  backupCodes: 'backupCodes',
  isEnabled: 'isEnabled',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.FolderScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  name: 'name',
  parentFolderId: 'parentFolderId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DocumentScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  folderId: 'folderId',
  filename: 'filename',
  encryptedFilename: 'encryptedFilename',
  fileSize: 'fileSize',
  mimeType: 'mimeType',
  fileHash: 'fileHash',
  status: 'status',
  parentVersionId: 'parentVersionId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DocumentMetadataScalarFieldEnum = {
  id: 'id',
  documentId: 'documentId',
  extractedText: 'extractedText',
  ocrConfidence: 'ocrConfidence',
  thumbnailUrl: 'thumbnailUrl',
  entities: 'entities',
  classification: 'classification',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TagScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  name: 'name',
  color: 'color',
  createdAt: 'createdAt'
};

exports.Prisma.DocumentTagScalarFieldEnum = {
  id: 'id',
  documentId: 'documentId',
  tagId: 'tagId',
  createdAt: 'createdAt'
};

exports.Prisma.VerificationCodeScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  code: 'code',
  expiresAt: 'expiresAt',
  isUsed: 'isUsed',
  createdAt: 'createdAt'
};

exports.Prisma.PendingUserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  passwordHash: 'passwordHash',
  salt: 'salt',
  phoneNumber: 'phoneNumber',
  emailCode: 'emailCode',
  phoneCode: 'phoneCode',
  emailVerified: 'emailVerified',
  phoneVerified: 'phoneVerified',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt'
};

exports.Prisma.ConversationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  title: 'title',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MessageScalarFieldEnum = {
  id: 'id',
  conversationId: 'conversationId',
  role: 'role',
  content: 'content',
  metadata: 'metadata',
  createdAt: 'createdAt'
};

exports.Prisma.ReminderScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  title: 'title',
  description: 'description',
  dueDate: 'dueDate',
  isCompleted: 'isCompleted',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  User: 'User',
  Session: 'Session',
  TwoFactorAuth: 'TwoFactorAuth',
  Folder: 'Folder',
  Document: 'Document',
  DocumentMetadata: 'DocumentMetadata',
  Tag: 'Tag',
  DocumentTag: 'DocumentTag',
  VerificationCode: 'VerificationCode',
  PendingUser: 'PendingUser',
  Conversation: 'Conversation',
  Message: 'Message',
  Reminder: 'Reminder'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "C:\\Users\\Pedro\\Desktop\\webapp\\backend\\src\\generated\\prisma",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "windows",
        "native": true
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "C:\\Users\\Pedro\\Desktop\\webapp\\backend\\prisma\\schema.prisma",
    "isCustomOutput": true
  },
  "relativeEnvPaths": {
    "rootEnvPath": null,
    "schemaEnvPath": "../../../.env"
  },
  "relativePath": "../../../prisma",
  "clientVersion": "6.16.3",
  "engineVersion": "bb420e667c1820a8c05a38023385f6cc7ef8e83a",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "sqlite",
  "postinstall": false,
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "// This is your Prisma schema file,\n// learn more about it in the docs: https://pris.ly/d/prisma-schema\n\ngenerator client {\n  provider = \"prisma-client-js\"\n  output   = \"../src/generated/prisma\"\n}\n\ndatasource db {\n  provider = \"sqlite\"\n  url      = env(\"DATABASE_URL\")\n}\n\n// User model\nmodel User {\n  id              String   @id @default(uuid())\n  email           String   @unique\n  firstName       String?\n  lastName        String?\n  profileImage    String?\n  passwordHash    String? // Null for OAuth users\n  salt            String? // Null for OAuth users\n  googleId        String?  @unique\n  appleId         String?  @unique\n  phoneNumber     String?  @unique\n  isEmailVerified Boolean  @default(false)\n  isPhoneVerified Boolean  @default(false)\n  createdAt       DateTime @default(now())\n  updatedAt       DateTime @updatedAt\n\n  // Relations\n  sessions          Session[]\n  twoFactorAuth     TwoFactorAuth?\n  documents         Document[]\n  folders           Folder[]\n  tags              Tag[]\n  verificationCodes VerificationCode[]\n  conversations     Conversation[]\n  reminders         Reminder[]\n\n  @@map(\"users\")\n}\n\n// Session model for refresh tokens\nmodel Session {\n  id               String   @id @default(uuid())\n  userId           String\n  refreshTokenHash String\n  expiresAt        DateTime\n  createdAt        DateTime @default(now())\n\n  // Relations\n  user User @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@index([userId])\n  @@map(\"sessions\")\n}\n\n// Two-Factor Authentication model\nmodel TwoFactorAuth {\n  id          String   @id @default(uuid())\n  userId      String   @unique\n  secret      String // Encrypted TOTP secret\n  backupCodes String // Encrypted backup codes (JSON array)\n  isEnabled   Boolean  @default(false)\n  createdAt   DateTime @default(now())\n  updatedAt   DateTime @updatedAt\n\n  // Relations\n  user User @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@map(\"two_factor_auth\")\n}\n\n// Folder model for document organization\nmodel Folder {\n  id             String   @id @default(uuid())\n  userId         String\n  name           String\n  parentFolderId String? // Null for root folders\n  createdAt      DateTime @default(now())\n  updatedAt      DateTime @updatedAt\n\n  // Relations\n  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)\n  parentFolder Folder?    @relation(\"FolderHierarchy\", fields: [parentFolderId], references: [id], onDelete: Cascade)\n  subfolders   Folder[]   @relation(\"FolderHierarchy\")\n  documents    Document[]\n\n  @@index([userId])\n  @@index([parentFolderId])\n  @@map(\"folders\")\n}\n\n// Document model\nmodel Document {\n  id                String   @id @default(uuid())\n  userId            String\n  folderId          String?\n  filename          String\n  encryptedFilename String // Actual filename in storage\n  fileSize          Int\n  mimeType          String\n  fileHash          String // SHA-256 hash for integrity\n  status            String   @default(\"processing\") // processing, completed, failed\n  parentVersionId   String? // For version control\n  createdAt         DateTime @default(now())\n  updatedAt         DateTime @updatedAt\n\n  // Relations\n  user          User              @relation(fields: [userId], references: [id], onDelete: Cascade)\n  folder        Folder?           @relation(fields: [folderId], references: [id], onDelete: SetNull)\n  parentVersion Document?         @relation(\"DocumentVersions\", fields: [parentVersionId], references: [id], onDelete: SetNull)\n  versions      Document[]        @relation(\"DocumentVersions\")\n  metadata      DocumentMetadata?\n  tags          DocumentTag[]\n\n  @@index([userId])\n  @@index([folderId])\n  @@index([parentVersionId])\n  @@map(\"documents\")\n}\n\n// Document metadata (extracted text, OCR results, etc.)\nmodel DocumentMetadata {\n  id             String   @id @default(uuid())\n  documentId     String   @unique\n  extractedText  String? // Long text for extracted content\n  ocrConfidence  Float?\n  thumbnailUrl   String?\n  entities       String? // JSON string of extracted entities\n  classification String? // invoice, contract, receipt, etc.\n  createdAt      DateTime @default(now())\n  updatedAt      DateTime @updatedAt\n\n  // Relations\n  document Document @relation(fields: [documentId], references: [id], onDelete: Cascade)\n\n  @@map(\"document_metadata\")\n}\n\n// Tag model\nmodel Tag {\n  id        String   @id @default(uuid())\n  userId    String\n  name      String\n  color     String? // Hex color for UI\n  createdAt DateTime @default(now())\n\n  // Relations\n  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)\n  documents DocumentTag[]\n\n  @@unique([userId, name])\n  @@index([userId])\n  @@map(\"tags\")\n}\n\n// Junction table for Document-Tag many-to-many relationship\nmodel DocumentTag {\n  id         String   @id @default(uuid())\n  documentId String\n  tagId      String\n  createdAt  DateTime @default(now())\n\n  // Relations\n  document Document @relation(fields: [documentId], references: [id], onDelete: Cascade)\n  tag      Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)\n\n  @@unique([documentId, tagId])\n  @@index([documentId])\n  @@index([tagId])\n  @@map(\"document_tags\")\n}\n\n// Verification codes for email and phone verification\nmodel VerificationCode {\n  id        String   @id @default(uuid())\n  userId    String\n  type      String // \"email\" or \"phone\"\n  code      String // 6-digit verification code\n  expiresAt DateTime\n  isUsed    Boolean  @default(false)\n  createdAt DateTime @default(now())\n\n  // Relations\n  user User @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@index([userId])\n  @@index([code])\n  @@map(\"verification_codes\")\n}\n\n// Pending users waiting for email and phone verification\nmodel PendingUser {\n  id            String   @id @default(uuid())\n  email         String   @unique\n  passwordHash  String\n  salt          String\n  phoneNumber   String?\n  emailCode     String?\n  phoneCode     String?\n  emailVerified Boolean  @default(false)\n  phoneVerified Boolean  @default(false)\n  expiresAt     DateTime // Expires after 24 hours if not verified\n  createdAt     DateTime @default(now())\n\n  @@index([email])\n  @@map(\"pending_users\")\n}\n\n// Conversation model for chat history\nmodel Conversation {\n  id        String   @id @default(uuid())\n  userId    String\n  title     String   @default(\"New Chat\")\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  // Relations\n  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)\n  messages Message[]\n\n  @@index([userId])\n  @@map(\"conversations\")\n}\n\n// Message model for chat messages\nmodel Message {\n  id             String   @id @default(uuid())\n  conversationId String\n  role           String // \"user\" or \"assistant\"\n  content        String // The message text\n  metadata       String? // JSON string for additional data (function calls, etc.)\n  createdAt      DateTime @default(now())\n\n  // Relations\n  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)\n\n  @@index([conversationId])\n  @@map(\"messages\")\n}\n\n// Reminder/Notification model\nmodel Reminder {\n  id          String   @id @default(uuid())\n  userId      String\n  title       String\n  description String?\n  dueDate     DateTime\n  isCompleted Boolean  @default(false)\n  createdAt   DateTime @default(now())\n  updatedAt   DateTime @updatedAt\n\n  // Relations\n  user User @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@index([userId])\n  @@index([dueDate])\n  @@map(\"reminders\")\n}\n",
  "inlineSchemaHash": "1f0c29dfa5bfd2c4ffc3c561cd707c7b16c77dd8e006d81c72377da8757ec0b4",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"User\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"firstName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"lastName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"profileImage\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"passwordHash\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"salt\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"googleId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"appleId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"phoneNumber\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"isEmailVerified\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"isPhoneVerified\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"sessions\",\"kind\":\"object\",\"type\":\"Session\",\"relationName\":\"SessionToUser\"},{\"name\":\"twoFactorAuth\",\"kind\":\"object\",\"type\":\"TwoFactorAuth\",\"relationName\":\"TwoFactorAuthToUser\"},{\"name\":\"documents\",\"kind\":\"object\",\"type\":\"Document\",\"relationName\":\"DocumentToUser\"},{\"name\":\"folders\",\"kind\":\"object\",\"type\":\"Folder\",\"relationName\":\"FolderToUser\"},{\"name\":\"tags\",\"kind\":\"object\",\"type\":\"Tag\",\"relationName\":\"TagToUser\"},{\"name\":\"verificationCodes\",\"kind\":\"object\",\"type\":\"VerificationCode\",\"relationName\":\"UserToVerificationCode\"},{\"name\":\"conversations\",\"kind\":\"object\",\"type\":\"Conversation\",\"relationName\":\"ConversationToUser\"},{\"name\":\"reminders\",\"kind\":\"object\",\"type\":\"Reminder\",\"relationName\":\"ReminderToUser\"}],\"dbName\":\"users\"},\"Session\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"refreshTokenHash\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"expiresAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"SessionToUser\"}],\"dbName\":\"sessions\"},\"TwoFactorAuth\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"secret\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"backupCodes\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"isEnabled\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"TwoFactorAuthToUser\"}],\"dbName\":\"two_factor_auth\"},\"Folder\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"parentFolderId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"FolderToUser\"},{\"name\":\"parentFolder\",\"kind\":\"object\",\"type\":\"Folder\",\"relationName\":\"FolderHierarchy\"},{\"name\":\"subfolders\",\"kind\":\"object\",\"type\":\"Folder\",\"relationName\":\"FolderHierarchy\"},{\"name\":\"documents\",\"kind\":\"object\",\"type\":\"Document\",\"relationName\":\"DocumentToFolder\"}],\"dbName\":\"folders\"},\"Document\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"folderId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"filename\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"encryptedFilename\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"fileSize\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"mimeType\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"fileHash\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"status\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"parentVersionId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"DocumentToUser\"},{\"name\":\"folder\",\"kind\":\"object\",\"type\":\"Folder\",\"relationName\":\"DocumentToFolder\"},{\"name\":\"parentVersion\",\"kind\":\"object\",\"type\":\"Document\",\"relationName\":\"DocumentVersions\"},{\"name\":\"versions\",\"kind\":\"object\",\"type\":\"Document\",\"relationName\":\"DocumentVersions\"},{\"name\":\"metadata\",\"kind\":\"object\",\"type\":\"DocumentMetadata\",\"relationName\":\"DocumentToDocumentMetadata\"},{\"name\":\"tags\",\"kind\":\"object\",\"type\":\"DocumentTag\",\"relationName\":\"DocumentToDocumentTag\"}],\"dbName\":\"documents\"},\"DocumentMetadata\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"documentId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"extractedText\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"ocrConfidence\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"thumbnailUrl\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"entities\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"classification\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"document\",\"kind\":\"object\",\"type\":\"Document\",\"relationName\":\"DocumentToDocumentMetadata\"}],\"dbName\":\"document_metadata\"},\"Tag\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"color\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"TagToUser\"},{\"name\":\"documents\",\"kind\":\"object\",\"type\":\"DocumentTag\",\"relationName\":\"DocumentTagToTag\"}],\"dbName\":\"tags\"},\"DocumentTag\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"documentId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"tagId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"document\",\"kind\":\"object\",\"type\":\"Document\",\"relationName\":\"DocumentToDocumentTag\"},{\"name\":\"tag\",\"kind\":\"object\",\"type\":\"Tag\",\"relationName\":\"DocumentTagToTag\"}],\"dbName\":\"document_tags\"},\"VerificationCode\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"type\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"code\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"expiresAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"isUsed\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"UserToVerificationCode\"}],\"dbName\":\"verification_codes\"},\"PendingUser\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"passwordHash\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"salt\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"phoneNumber\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"emailCode\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"phoneCode\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"emailVerified\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"phoneVerified\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"expiresAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"pending_users\"},\"Conversation\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"ConversationToUser\"},{\"name\":\"messages\",\"kind\":\"object\",\"type\":\"Message\",\"relationName\":\"ConversationToMessage\"}],\"dbName\":\"conversations\"},\"Message\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"conversationId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"role\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"content\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"metadata\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"conversation\",\"kind\":\"object\",\"type\":\"Conversation\",\"relationName\":\"ConversationToMessage\"}],\"dbName\":\"messages\"},\"Reminder\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"dueDate\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"isCompleted\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"ReminderToUser\"}],\"dbName\":\"reminders\"}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

