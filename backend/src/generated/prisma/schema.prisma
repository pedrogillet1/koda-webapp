// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// User model
model User {
  id              String   @id @default(uuid())
  email           String   @unique
  firstName       String?
  lastName        String?
  profileImage    String?
  passwordHash    String? // Null for OAuth users
  salt            String? // Null for OAuth users
  googleId        String?  @unique
  appleId         String?  @unique
  phoneNumber     String?  @unique
  isEmailVerified Boolean  @default(false)
  isPhoneVerified Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  sessions          Session[]
  twoFactorAuth     TwoFactorAuth?
  documents         Document[]
  folders           Folder[]
  tags              Tag[]
  verificationCodes VerificationCode[]
  conversations     Conversation[]
  reminders         Reminder[]

  @@map("users")
}

// Session model for refresh tokens
model Session {
  id               String   @id @default(uuid())
  userId           String
  refreshTokenHash String
  expiresAt        DateTime
  createdAt        DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("sessions")
}

// Two-Factor Authentication model
model TwoFactorAuth {
  id          String   @id @default(uuid())
  userId      String   @unique
  secret      String // Encrypted TOTP secret
  backupCodes String // Encrypted backup codes (JSON array)
  isEnabled   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("two_factor_auth")
}

// Folder model for document organization
model Folder {
  id             String   @id @default(uuid())
  userId         String
  name           String
  parentFolderId String? // Null for root folders
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  parentFolder Folder?    @relation("FolderHierarchy", fields: [parentFolderId], references: [id], onDelete: Cascade)
  subfolders   Folder[]   @relation("FolderHierarchy")
  documents    Document[]

  @@index([userId])
  @@index([parentFolderId])
  @@map("folders")
}

// Document model
model Document {
  id                String   @id @default(uuid())
  userId            String
  folderId          String?
  filename          String
  encryptedFilename String // Actual filename in storage
  fileSize          Int
  mimeType          String
  fileHash          String // SHA-256 hash for integrity
  status            String   @default("processing") // processing, completed, failed
  parentVersionId   String? // For version control
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  user          User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  folder        Folder?           @relation(fields: [folderId], references: [id], onDelete: SetNull)
  parentVersion Document?         @relation("DocumentVersions", fields: [parentVersionId], references: [id], onDelete: SetNull)
  versions      Document[]        @relation("DocumentVersions")
  metadata      DocumentMetadata?
  tags          DocumentTag[]

  @@index([userId])
  @@index([folderId])
  @@index([parentVersionId])
  @@map("documents")
}

// Document metadata (extracted text, OCR results, etc.)
model DocumentMetadata {
  id             String   @id @default(uuid())
  documentId     String   @unique
  extractedText  String? // Long text for extracted content
  ocrConfidence  Float?
  thumbnailUrl   String?
  entities       String? // JSON string of extracted entities
  classification String? // invoice, contract, receipt, etc.
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  document Document @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@map("document_metadata")
}

// Tag model
model Tag {
  id        String   @id @default(uuid())
  userId    String
  name      String
  color     String? // Hex color for UI
  createdAt DateTime @default(now())

  // Relations
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  documents DocumentTag[]

  @@unique([userId, name])
  @@index([userId])
  @@map("tags")
}

// Junction table for Document-Tag many-to-many relationship
model DocumentTag {
  id         String   @id @default(uuid())
  documentId String
  tagId      String
  createdAt  DateTime @default(now())

  // Relations
  document Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  tag      Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([documentId, tagId])
  @@index([documentId])
  @@index([tagId])
  @@map("document_tags")
}

// Verification codes for email and phone verification
model VerificationCode {
  id        String   @id @default(uuid())
  userId    String
  type      String // "email" or "phone"
  code      String // 6-digit verification code
  expiresAt DateTime
  isUsed    Boolean  @default(false)
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([code])
  @@map("verification_codes")
}

// Pending users waiting for email and phone verification
model PendingUser {
  id            String   @id @default(uuid())
  email         String   @unique
  passwordHash  String
  salt          String
  phoneNumber   String?
  emailCode     String?
  phoneCode     String?
  emailVerified Boolean  @default(false)
  phoneVerified Boolean  @default(false)
  expiresAt     DateTime // Expires after 24 hours if not verified
  createdAt     DateTime @default(now())

  @@index([email])
  @@map("pending_users")
}

// Conversation model for chat history
model Conversation {
  id        String   @id @default(uuid())
  userId    String
  title     String   @default("New Chat")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages Message[]

  @@index([userId])
  @@map("conversations")
}

// Message model for chat messages
model Message {
  id             String   @id @default(uuid())
  conversationId String
  role           String // "user" or "assistant"
  content        String // The message text
  metadata       String? // JSON string for additional data (function calls, etc.)
  createdAt      DateTime @default(now())

  // Relations
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@index([conversationId])
  @@map("messages")
}

// Reminder/Notification model
model Reminder {
  id          String   @id @default(uuid())
  userId      String
  title       String
  description String?
  dueDate     DateTime
  isCompleted Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([dueDate])
  @@map("reminders")
}
