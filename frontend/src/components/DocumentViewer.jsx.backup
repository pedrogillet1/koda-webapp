import React, { useState, useEffect, useMemo } from 'react';
import { useParams, useNavigate, useLocation } from 'react-router-dom';
import { Document, Page, pdfjs } from 'react-pdf';
import api from '../services/api';
import LeftNav from './LeftNav';
import NotificationPanel from './NotificationPanel';
import SearchInDocumentModal from './SearchInDocumentModal';
import MarkdownEditor from './MarkdownEditor';
import PPTXPreview from './PPTXPreview';
import DeleteConfirmationModal from './DeleteConfirmationModal';
import { ReactComponent as ArrowLeftIcon } from '../assets/arrow-narrow-left.svg';
import { ReactComponent as LogoutWhiteIcon } from '../assets/Logout-white.svg';
import logoSvg from '../assets/logo.svg';
import { ReactComponent as TrashCanIcon } from '../assets/Trash can.svg';
import { ReactComponent as PrinterIcon } from '../assets/printer.svg';
import { ReactComponent as DownloadIcon } from '../assets/Download 3- black.svg';
import { ReactComponent as PlusIcon } from '../assets/Plus.svg';
import { ReactComponent as MinusIcon } from '../assets/Minus.svg';
import { ReactComponent as SearchIcon } from '../assets/Search.svg';
import { ReactComponent as StarIcon } from '../assets/Star.svg';
import { ReactComponent as BorderRightIcon } from '../assets/border-right.svg';
import { ReactComponent as XCloseIcon } from '../assets/x-close.svg';
import folderIcon from '../assets/folder_icon.svg';
import pdfIcon from '../assets/pdf-icon.svg';
import docIcon from '../assets/doc-icon.svg';
import xlsIcon from '../assets/xls.svg';

// Set up the worker for pdf.js - using CDN to match installed pdfjs-dist version
pdfjs.GlobalWorkerOptions.workerSrc = `https://unpkg.com/pdfjs-dist@${pdfjs.version}/build/pdf.worker.min.mjs`;

// Text/Code Preview Component
const TextCodePreview = ({ url, document, zoom }) => {
  const [content, setContent] = useState('');
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    fetch(url)
      .then(res => res.text())
      .then(text => {
        setContent(text);
        setLoading(false);
      })
      .catch(err => {
        console.error('Error loading text:', err);
        setLoading(false);
      });
  }, [url]);

  if (loading) {
    return <div style={{ color: '#6C6B6E', fontFamily: 'Plus Jakarta Sans' }}>Loading content...</div>;
  }

  return (
    <div style={{
      width: `${zoom}%`,
      maxWidth: '900px',
      background: 'white',
      borderRadius: 8,
      boxShadow: '0 4px 12px rgba(0,0,0,0.1)',
      overflow: 'hidden',
      transition: 'width 0.2s ease'
    }}>
      <div style={{
        padding: 16,
        background: '#F5F5F5',
        borderBottom: '1px solid #E6E6EC',
        fontSize: 14,
        fontWeight: '600',
        color: '#32302C',
        fontFamily: 'Plus Jakarta Sans'
      }}>
        {document.filename}
      </div>
      <pre style={{
        padding: 20,
        margin: 0,
        overflow: 'auto',
        maxHeight: '70vh',
        fontSize: `${zoom / 10}px`,
        fontFamily: 'monospace',
        lineHeight: 1.6,
        color: '#32302C',
        whiteSpace: 'pre-wrap',
        wordWrap: 'break-word',
        transition: 'font-size 0.2s ease'
      }}>
        {content}
      </pre>
    </div>
  );
};

const DocumentViewer = () => {
  const { documentId } = useParams();
  const navigate = useNavigate();
  const location = useLocation();
  const [document, setDocument] = useState(null);
  const [loading, setLoading] = useState(true);
  const [zoom, setZoom] = useState(100);
  const [documentUrl, setDocumentUrl] = useState(null);
  const [showZoomDropdown, setShowZoomDropdown] = useState(false);
  const [numPages, setNumPages] = useState(null);
  const [pageNumber, setPageNumber] = useState(1);
  const [showNotificationsPopup, setShowNotificationsPopup] = useState(false);
  const [extractedText, setExtractedText] = useState(null);
  const [imageLoading, setImageLoading] = useState(true);
  const [imageError, setImageError] = useState(false);
  const [showSearchModal, setShowSearchModal] = useState(false);
  const [searchQuery, setSearchQuery] = useState('');
  const [showShareModal, setShowShareModal] = useState(false);
  const [shareEmail, setShareEmail] = useState('');
  const [sendingEmail, setSendingEmail] = useState(false);
  const [showCategoryModal, setShowCategoryModal] = useState(false);
  const [categories, setCategories] = useState([]);
  const [selectedCategory, setSelectedCategory] = useState(null);
  const [newCategoryName, setNewCategoryName] = useState('');
  const [currentPage, setCurrentPage] = useState(1);
  const [showAskKoda, setShowAskKoda] = useState(true);
  const [showExtractedText, setShowExtractedText] = useState(false);
  const [isDocxConvertedToPdf, setIsDocxConvertedToPdf] = useState(false);
  const [showDeleteModal, setShowDeleteModal] = useState(false);

  const zoomPresets = [50, 75, 100, 125, 150, 175, 200];

  // Handler for saving markdown edits
  const handleSaveMarkdown = async (docId, newMarkdownContent) => {
    try {
      await api.patch(`/api/documents/${docId}/markdown`, {
        markdownContent: newMarkdownContent
      });

      // Update local document state
      setDocument(prev => ({
        ...prev,
        metadata: {
          ...prev.metadata,
          markdownContent: newMarkdownContent
        }
      }));

      console.log('Markdown saved successfully');
    } catch (error) {
      console.error('Error saving markdown:', error);
      throw error; // Re-throw to let the editor handle the error
    }
  };

  // Handler for exporting document
  const handleExport = async (format) => {
    try {
      console.log(`Exporting document as ${format}...`);

      // Call export API endpoint
      const response = await api.post(`/api/documents/${documentId}/export`, {
        format: format
      }, {
        responseType: 'blob'
      });

      // Create download link
      const blob = new Blob([response.data], {
        type: format === 'pdf' ? 'application/pdf' :
              format === 'docx' ? 'application/vnd.openxmlformats-officedocument.wordprocessingml.document' :
              'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
      });

      const url = URL.createObjectURL(blob);
      const link = window.document.createElement('a');
      link.href = url;

      // Generate filename with appropriate extension
      const baseFilename = document.filename.split('.').slice(0, -1).join('.');
      link.download = `${baseFilename}.${format}`;

      window.document.body.appendChild(link);
      link.click();
      window.document.body.removeChild(link);
      URL.revokeObjectURL(url);

      console.log(`Document exported as ${format} successfully`);
    } catch (error) {
      console.error(`Error exporting document as ${format}:`, error);
      alert(`Failed to export document: ${error.response?.data?.error || error.message}`);
    }
  };

  // Determine breadcrumb start based on location state or default to Documents
  const breadcrumbStart = useMemo(() => {
    const from = location.state?.from;
    if (from === '/home' || from === 'home') {
      return { label: 'Home', path: '/home' };
    }
    return { label: 'Documents', path: '/documents' };
  }, [location.state]);

  const onDocumentLoadSuccess = ({ numPages }) => {
    setNumPages(numPages);
    setPageNumber(1);
  };

  // Memoize the file and options props to prevent unnecessary reloads
  const fileConfig = useMemo(() => documentUrl ? { url: documentUrl } : null, [documentUrl]);
  const pdfOptions = useMemo(() => ({
    cMapUrl: 'https://unpkg.com/pdfjs-dist@' + pdfjs.version + '/cmaps/',
    cMapPacked: true,
  }), []);

  const formatFileSize = (bytes) => {
    if (!bytes) return '0 B';
    const sizes = ['B', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(1024));
    return Math.round(bytes / Math.pow(1024, i) * 100) / 100 + ' ' + sizes[i];
  };

  const getFileType = (filename, mimeType) => {
    const extension = filename.split('.').pop().toLowerCase();

    // Image formats
    if (['jpg', 'jpeg', 'png', 'gif', 'svg', 'webp', 'bmp'].includes(extension)) {
      return 'image';
    }

    // Video formats
    if (['mp4', 'webm', 'mov', 'avi', 'mkv'].includes(extension)) {
      return 'video';
    }

    // Audio formats
    if (['mp3', 'wav', 'ogg', 'm4a', 'aac'].includes(extension)) {
      return 'audio';
    }

    // PDF
    if (extension === 'pdf') {
      return 'pdf';
    }

    // Microsoft Office documents
    if (['doc', 'docx'].includes(extension)) {
      return 'word';
    }

    if (['xls', 'xlsx'].includes(extension)) {
      return 'excel';
    }

    if (['ppt', 'pptx'].includes(extension)) {
      return 'powerpoint';
    }

    // Text files
    if (['txt', 'md', 'json', 'xml', 'csv'].includes(extension)) {
      return 'text';
    }

    // Code files
    if (['js', 'jsx', 'ts', 'tsx', 'py', 'java', 'cpp', 'c', 'html', 'css', 'php', 'rb', 'go'].includes(extension)) {
      return 'code';
    }

    // Archives
    if (['zip', 'rar', '7z', 'tar', 'gz'].includes(extension)) {
      return 'archive';
    }

    return 'unknown';
  };

  useEffect(() => {
    const fetchCategories = async () => {
      try {
        const response = await api.get('/api/folders');
        setCategories(response.data.folders || []);
      } catch (error) {
        console.error('Error fetching categories:', error);
      }
    };
    fetchCategories();
  }, []);

  useEffect(() => {
    const fetchDocument = async () => {
      try {
        const response = await api.get('/api/documents');
        const allDocuments = response.data.documents || [];
        const foundDocument = allDocuments.find(doc => doc.id === documentId);

        if (foundDocument) {
          setDocument(foundDocument);

          // Store extracted text if available
          if (foundDocument.metadata && foundDocument.metadata.extractedText) {
            setExtractedText(foundDocument.metadata.extractedText);
          }

          // Check if document is DOCX - use preview endpoint for PDF conversion
          const isDocx = foundDocument.mimeType === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document';

          if (isDocx) {
            // Get PDF preview for DOCX
            console.log('🔍 Requesting DOCX preview for document:', documentId);
            const previewResponse = await api.get(`/api/documents/${documentId}/preview`);
            const { previewUrl, previewType } = previewResponse.data;
            console.log('✅ Preview response received:', { previewUrl: previewUrl.substring(0, 100), previewType });
            setDocumentUrl(previewUrl);
            setIsDocxConvertedToPdf(true); // Mark that this DOCX should be treated as PDF for rendering
            console.log('✅ DOCX marked as converted to PDF for rendering');
          } else {
            setIsDocxConvertedToPdf(false);
            // Use existing stream endpoint for other files
            const fileResponse = await api.get(`/api/documents/${documentId}/stream`, {
              responseType: 'blob'
            });
            const blob = new Blob([fileResponse.data], { type: foundDocument.mimeType });
            const url = URL.createObjectURL(blob);
            setDocumentUrl(url);
          }
        }
        setLoading(false);
      } catch (error) {
        console.error('Error fetching document:', error);
        setLoading(false);
      }
    };

    if (documentId) {
      fetchDocument();
    }

    // Cleanup blob URL
    return () => {
      if (documentUrl && documentUrl.startsWith('blob:')) {
        URL.revokeObjectURL(documentUrl);
      }
    };
  }, [documentId]);

  // Add Ctrl+F / Cmd+F keyboard shortcut to open search
  useEffect(() => {
    const handleKeyDown = (e) => {
      if ((e.ctrlKey || e.metaKey) && e.key === 'f') {
        e.preventDefault();
        setShowSearchModal(true);
      }
    };

    window.addEventListener('keydown', handleKeyDown);
    return () => window.removeEventListener('keydown', handleKeyDown);
  }, []);

  if (loading) {
    return (
      <div style={{ width: '100%', height: '100vh', display: 'flex', alignItems: 'center', justifyContent: 'center' }}>
        <div style={{ color: '#6C6B6E', fontSize: 16, fontFamily: 'Plus Jakarta Sans' }}>Loading document...</div>
      </div>
    );
  }

  if (!document) {
    return (
      <div style={{ width: '100%', height: '100vh', display: 'flex', alignItems: 'center', justifyContent: 'center' }}>
        <div style={{ color: '#6C6B6E', fontSize: 16, fontFamily: 'Plus Jakarta Sans' }}>Document not found</div>
      </div>
    );
  }

  return (
    <div style={{ width: '100%', height: '100%', position: 'relative', background: '#F5F5F5', overflow: 'hidden', justifyContent: 'flex-start', alignItems: 'center', display: 'inline-flex' }}>
      <LeftNav onNotificationClick={() => setShowNotificationsPopup(true)} />
      <div style={{ flex: '1 1 0', height: '100vh', flexDirection: 'column', justifyContent: 'flex-start', alignItems: 'flex-start', display: 'inline-flex' }}>
        {/* Header */}
        <div style={{ alignSelf: 'stretch', height: 120, padding: 20, background: 'white', borderBottom: '1px #E6E6EC solid', justifyContent: 'flex-start', alignItems: 'center', gap: 12, display: 'inline-flex' }}>
          <button
            onClick={() => navigate(-1)}
            style={{
              width: 52,
              height: 52,
              background: 'white',
              borderRadius: 100,
              outline: '1px #E6E6EC solid',
              outlineOffset: '-1px',
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'center',
              cursor: 'pointer',
              border: 'none',
              transition: 'all 0.2s ease'
            }}
            onMouseEnter={(e) => {
              e.currentTarget.style.background = '#F5F5F5';
            }}
            onMouseLeave={(e) => {
              e.currentTarget.style.background = 'white';
            }}
          >
            <ArrowLeftIcon style={{ width: 20, height: 20, stroke: '#55534E' }} />
          </button>

          <div style={{ flex: '1 1 0', flexDirection: 'column', justifyContent: 'flex-start', alignItems: 'flex-start', gap: 8, display: 'inline-flex' }}>
            <div style={{ justifyContent: 'flex-start', alignItems: 'center', display: 'inline-flex' }}>
              <div style={{ justifyContent: 'flex-start', alignItems: 'center', gap: 8, display: 'flex' }}>
                {/* Home or Documents */}
                <div
                  onClick={() => navigate(breadcrumbStart.path)}
                  style={{ paddingTop: 4, paddingBottom: 4, borderRadius: 6, justifyContent: 'center', alignItems: 'center', display: 'flex', cursor: 'pointer' }}
                >
                  <div style={{ color: '#6C6B6E', fontSize: 14, fontFamily: 'Plus Jakarta Sans', fontWeight: '600', lineHeight: '20px', wordWrap: 'break-word' }}>{breadcrumbStart.label}</div>
                </div>
                {/* Category (if document has folderId) */}
                {document.folderId && categories.length > 0 && (() => {
                  const category = categories.find(cat => cat.id === document.folderId);
                  return category ? (
                    <React.Fragment>
                      <div style={{ color: '#D0D5DD', fontSize: 16 }}>›</div>
                      <div style={{ paddingLeft: 8, paddingRight: 8, paddingTop: 4, paddingBottom: 4, borderRadius: 6, justifyContent: 'center', alignItems: 'center', display: 'flex' }}>
                        <div style={{ color: '#6C6B6E', fontSize: 14, fontFamily: 'Plus Jakarta Sans', fontWeight: '600', lineHeight: '20px', wordWrap: 'break-word' }}>{category.name}</div>
                      </div>
                    </React.Fragment>
                  ) : null;
                })()}
                {/* Folder path (if exists) */}
                {document.folderPath && document.folderPath.split('/').filter(Boolean).map((folder, index, arr) => (
                  <React.Fragment key={index}>
                    <div style={{ color: '#D0D5DD', fontSize: 16 }}>›</div>
                    <div style={{ paddingLeft: 8, paddingRight: 8, paddingTop: 4, paddingBottom: 4, borderRadius: 6, justifyContent: 'center', alignItems: 'center', display: 'flex' }}>
                      <div style={{ color: '#6C6B6E', fontSize: 14, fontFamily: 'Plus Jakarta Sans', fontWeight: '600', lineHeight: '20px', wordWrap: 'break-word' }}>{folder}</div>
                    </div>
                  </React.Fragment>
                ))}
                {/* File name */}
                <div style={{ color: '#D0D5DD', fontSize: 16 }}>›</div>
                <div style={{ paddingLeft: 8, paddingRight: 8, paddingTop: 4, paddingBottom: 4, background: '#F9FAFB', borderRadius: 6, justifyContent: 'center', alignItems: 'center', display: 'flex' }}>
                  <div style={{ color: '#323232', fontSize: 14, fontFamily: 'Plus Jakarta Sans', fontWeight: '600', lineHeight: '20px', wordWrap: 'break-word' }}>{document.filename}</div>
                </div>
              </div>
            </div>
            <div style={{ textAlign: 'center' }}>
              <span style={{ color: '#323232', fontSize: 20, fontFamily: 'Plus Jakarta Sans', fontWeight: '700', textTransform: 'capitalize', lineHeight: '30px', wordWrap: 'break-word' }}>{document.filename}</span>
            </div>
          </div>

          <div style={{ width: 400, borderRadius: 12, justifyContent: 'center', alignItems: 'flex-start', gap: 24, display: 'flex' }}>
            <div style={{ justifyContent: 'flex-start', alignItems: 'flex-start', gap: 8, display: 'flex' }}>
              <button
                onClick={() => setShowDeleteModal(true)}
                style={{ width: 52, height: 52, paddingLeft: 18, paddingRight: 18, paddingTop: 10, paddingBottom: 10, background: 'white', overflow: 'hidden', borderRadius: 14, outline: '1px #E6E6EC solid', outlineOffset: '-1px', justifyContent: 'center', alignItems: 'center', gap: 8, display: 'flex', border: 'none', cursor: 'pointer' }}
              >
                <TrashCanIcon style={{ width: 36, height: 36 }} />
              </button>
              <button
                onClick={() => {
                  if (documentUrl && document) {
                    // Create a hidden iframe for printing
                    const iframe = window.document.createElement('iframe');
                    iframe.style.position = 'fixed';
                    iframe.style.right = '0';
                    iframe.style.bottom = '0';
                    iframe.style.width = '0';
                    iframe.style.height = '0';
                    iframe.style.border = '0';
                    window.document.body.appendChild(iframe);

                    iframe.onload = () => {
                      setTimeout(() => {
                        try {
                          iframe.contentWindow.focus();
                          iframe.contentWindow.print();
                        } catch (e) {
                          console.error('Print error:', e);
                        }
                        // Remove iframe after printing
                        setTimeout(() => {
                          window.document.body.removeChild(iframe);
                        }, 1000);
                      }, 500);
                    };

                    iframe.src = documentUrl;
                  }
                }}
                style={{ width: 52, height: 52, paddingLeft: 18, paddingRight: 18, paddingTop: 10, paddingBottom: 10, background: 'white', overflow: 'hidden', borderRadius: 14, outline: '1px #E6E6EC solid', outlineOffset: '-1px', justifyContent: 'center', alignItems: 'center', gap: 8, display: 'flex', border: 'none', cursor: 'pointer' }}
              >
                <PrinterIcon style={{ width: 36, height: 36 }} />
              </button>
              <button
                onClick={() => {
                  if (documentUrl && document) {
                    const link = window.document.createElement('a');
                    link.href = documentUrl;
                    link.download = document.filename;
                    window.document.body.appendChild(link);
                    link.click();
                    window.document.body.removeChild(link);
                  }
                }}
                style={{ width: 52, height: 52, paddingLeft: 18, paddingRight: 18, paddingTop: 10, paddingBottom: 10, background: 'white', overflow: 'hidden', borderRadius: 14, outline: '1px #E6E6EC solid', outlineOffset: '-1px', justifyContent: 'center', alignItems: 'center', gap: 8, display: 'flex', border: 'none', cursor: 'pointer' }}
              >
                <DownloadIcon style={{ width: 36, height: 36 }} />
              </button>
              <button
                onClick={() => navigate(`/chat?documentId=${documentId}`)}
                style={{ width: 52, height: 52, paddingLeft: 18, paddingRight: 18, paddingTop: 10, paddingBottom: 10, background: 'white', overflow: 'hidden', borderRadius: 14, outline: '1px #E6E6EC solid', outlineOffset: '-1px', justifyContent: 'center', alignItems: 'center', gap: 8, display: 'flex', border: 'none', cursor: 'pointer' }}
              >
                <img
                  src={logoSvg}
                  alt="Profile"
                  style={{
                    width: 32,
                    height: 32,
                    objectFit: 'contain',
                    imageRendering: '-webkit-optimize-contrast',
                    WebkitFontSmoothing: 'antialiased',
                    MozOsxFontSmoothing: 'grayscale'
                  }}
                />
              </button>
            </div>
            <button
              onClick={() => setShowShareModal(true)}
              style={{ flex: '1 1 0', height: 52, background: '#181818', overflow: 'hidden', borderRadius: 14, justifyContent: 'center', alignItems: 'center', gap: 8, display: 'flex', border: 'none', cursor: 'pointer' }}
            >
              <LogoutWhiteIcon style={{ width: 24, height: 24 }} />
              <div style={{ color: 'white', fontSize: 16, fontFamily: 'Plus Jakarta Sans', fontWeight: '600', textTransform: 'capitalize', lineHeight: '24px', wordWrap: 'break-word' }}>Share</div>
            </button>
          </div>
        </div>

        {/* Toolbar */}
        <div style={{ alignSelf: 'stretch', paddingLeft: 20, paddingRight: 20, paddingTop: 16, paddingBottom: 16, background: 'white', borderBottom: '1px #E6E6EC solid', justifyContent: 'flex-start', alignItems: 'center', gap: 12, display: 'inline-flex' }}>
          <BorderRightIcon style={{ width: 20, height: 20 }} />
          <div style={{ color: '#323232', fontSize: 14, fontFamily: 'Plus Jakarta Sans', fontWeight: '500', lineHeight: '20px', wordWrap: 'break-word' }}>
            {(() => {
              const fileType = document ? getFileType(document.filename, document.mimeType) : 'unknown';
              if (fileType === 'pdf' || fileType === 'word') {
                return numPages ? `${currentPage} of ${numPages} page${numPages > 1 ? 's' : ''}` : 'Loading...';
              }
              return '1 page';
            })()}
          </div>
          <div style={{ width: 1, height: 19, background: '#D9D9D9' }} />
          <div style={{ flex: '1 1 0', justifyContent: 'flex-start', alignItems: 'center', gap: 12, display: 'flex' }}>
            <button
              onClick={() => setShowCategoryModal(true)}
              style={{ width: 20, height: 20, background: 'transparent', border: 'none', cursor: 'pointer', display: 'flex', alignItems: 'center', justifyContent: 'center' }}
            >
              <StarIcon style={{ width: 20, height: 20 }} />
            </button>
          </div>
          <button
            onClick={() => setShowSearchModal(true)}
            style={{ width: 20, height: 20, background: 'transparent', border: 'none', cursor: 'pointer', display: 'flex', alignItems: 'center', justifyContent: 'center' }}
          >
            <SearchIcon style={{ width: 20, height: 20 }} />
          </button>
          <div style={{ display: 'flex', alignItems: 'center', gap: 8, position: 'relative' }}>
            <button
              onClick={() => setZoom(prev => Math.max(50, prev - 25))}
              style={{ width: 32, height: 32, background: 'white', border: 'none', borderRadius: 8, outline: '1px #E6E6EC solid', outlineOffset: '-1px', display: 'flex', alignItems: 'center', justifyContent: 'center', cursor: 'pointer' }}
            >
              <MinusIcon style={{ width: 16, height: 16 }} />
            </button>
            <div style={{ height: 40, borderRadius: 14, justifyContent: 'center', alignItems: 'center', display: 'flex', position: 'relative' }}>
              <div
                onClick={() => setShowZoomDropdown(!showZoomDropdown)}
                style={{ alignSelf: 'stretch', paddingLeft: 12, paddingRight: 12, paddingTop: 10, paddingBottom: 10, background: 'white', overflow: 'hidden', borderRadius: 14, outline: '1px #E6E6EC solid', outlineOffset: '-1px', justifyContent: 'center', alignItems: 'center', gap: 8, display: 'flex', cursor: 'pointer' }}
              >
                <div style={{ color: '#323232', fontSize: 14, fontFamily: 'Plus Jakarta Sans', fontWeight: '600', lineHeight: '19.60px', wordWrap: 'break-word' }}>{zoom}%</div>
                <div style={{ fontSize: 12, transition: 'transform 0.2s ease', transform: showZoomDropdown ? 'rotate(180deg)' : 'rotate(0deg)' }}>▼</div>
              </div>

              {/* Zoom Dropdown */}
              {showZoomDropdown && (
                <div style={{
                  position: 'absolute',
                  top: '100%',
                  left: 0,
                  marginTop: 4,
                  background: 'white',
                  borderRadius: 12,
                  border: '1px solid #E6E6EC',
                  boxShadow: '0 8px 24px rgba(0, 0, 0, 0.12)',
                  zIndex: 1000,
                  minWidth: 100,
                  overflow: 'hidden'
                }}>
                  {zoomPresets.map((preset) => (
                    <div
                      key={preset}
                      onClick={() => {
                        setZoom(preset);
                        setShowZoomDropdown(false);
                      }}
                      style={{
                        padding: '10px 16px',
                        cursor: 'pointer',
                        background: zoom === preset ? '#F5F5F5' : 'white',
                        color: '#323232',
                        fontSize: 14,
                        fontFamily: 'Plus Jakarta Sans',
                        fontWeight: zoom === preset ? '600' : '500',
                        transition: 'background 0.2s ease'
                      }}
                      onMouseEnter={(e) => {
                        if (zoom !== preset) e.currentTarget.style.background = '#F9FAFB';
                      }}
                      onMouseLeave={(e) => {
                        if (zoom !== preset) e.currentTarget.style.background = 'white';
                      }}
                    >
                      {preset}%
                    </div>
                  ))}
                </div>
              )}
            </div>
            <button
              onClick={() => setZoom(prev => Math.min(200, prev + 25))}
              style={{ width: 32, height: 32, background: 'white', border: 'none', borderRadius: 8, outline: '1px #E6E6EC solid', outlineOffset: '-1px', display: 'flex', alignItems: 'center', justifyContent: 'center', cursor: 'pointer' }}
            >
              <PlusIcon style={{ width: 16, height: 16 }} />
            </button>
          </div>
        </div>

        {/* Document Preview */}
        <div style={{ width: '100%', flex: 1, padding: 20, overflow: 'auto', flexDirection: 'column', justifyContent: 'flex-start', alignItems: 'center', gap: 20, display: 'flex', background: '#E5E5E5' }}>
          {document ? (
            (() => {
              const fileType = getFileType(document.filename, document.mimeType);

              // For other file types, keep existing rendering
              if (!documentUrl) {
                return (
                  <div style={{
                    padding: 40,
                    background: 'white',
                    borderRadius: 12,
                    boxShadow: '0 4px 12px rgba(0,0,0,0.1)',
                    color: '#6C6B6E',
                    fontSize: 16,
                    fontFamily: 'Plus Jakarta Sans'
                  }}>
                    Loading document...
                  </div>
                );
              }

              switch (fileType) {
                case 'word': // DOCX - show markdown editor
                case 'excel': // XLSX - show markdown editor
                  return <MarkdownEditor document={document} zoom={zoom} onSave={handleSaveMarkdown} />;

                case 'powerpoint': // PPTX - show PPTX preview
                  return <PPTXPreview document={document} zoom={zoom} />;

                case 'pdf':
                  return (
                    <div style={{ width: '100%', display: 'flex', flexDirection: 'column', alignItems: 'center', gap: 20 }}>
                      <Document
                        file={fileConfig}
                        onLoadSuccess={onDocumentLoadSuccess}
                        options={pdfOptions}
                        loading={
                          <div style={{
                            padding: 40,
                            background: 'white',
                            borderRadius: 12,
                            boxShadow: '0 4px 12px rgba(0,0,0,0.1)',
                            color: '#6C6B6E',
                            fontSize: 16,
                            fontFamily: 'Plus Jakarta Sans'
                          }}>
                            Loading PDF...
                          </div>
                        }
                        error={
                          <div style={{
                            padding: 40,
                            background: 'white',
                            borderRadius: 12,
                            boxShadow: '0 4px 12px rgba(0,0,0,0.1)',
                            textAlign: 'center'
                          }}>
                            <div style={{ fontSize: 64, marginBottom: 20 }}>📄</div>
                            <div style={{ fontSize: 18, fontWeight: '600', color: '#32302C', fontFamily: 'Plus Jakarta Sans', marginBottom: 12 }}>
                              Failed to load PDF
                            </div>
                            <div style={{ fontSize: 14, color: '#6C6B6E', fontFamily: 'Plus Jakarta Sans', marginBottom: 24 }}>
                              {document.filename}
                            </div>
                            <a href={documentUrl} download={document.filename} style={{
                              display: 'inline-block',
                              padding: '12px 24px',
                              background: '#181818',
                              color: 'white',
                              borderRadius: 14,
                              textDecoration: 'none',
                              fontSize: 14,
                              fontWeight: '600',
                              fontFamily: 'Plus Jakarta Sans'
                            }}>
                              Download PDF
                            </a>
                          </div>
                        }
                      >
                        {Array.from(new Array(numPages), (el, index) => (
                          <Page
                            key={`page_${index + 1}`}
                            pageNumber={index + 1}
                            width={900 * (zoom / 100)}
                            renderTextLayer={false}
                            renderAnnotationLayer={false}
                            loading={
                              <div style={{
                                width: 900 * (zoom / 100),
                                height: 1200 * (zoom / 100),
                                background: 'white',
                                borderRadius: 8,
                                boxShadow: '0 4px 12px rgba(0,0,0,0.1)',
                                display: 'flex',
                                alignItems: 'center',
                                justifyContent: 'center',
                                color: '#6C6B6E',
                                fontFamily: 'Plus Jakarta Sans'
                              }}>
                                Loading page {index + 1}...
                              </div>
                            }
                            onLoadSuccess={() => setCurrentPage(index + 1)}
                          />
                        ))}
                      </Document>
                    </div>
                  );

                case 'image':
                  return (
                    <div style={{ width: '100%', display: 'flex', flexDirection: 'column', alignItems: 'center' }}>
                      {imageLoading && !imageError && (
                        <div style={{
                          padding: 40,
                          background: 'white',
                          borderRadius: 12,
                          boxShadow: '0 4px 12px rgba(0,0,0,0.1)',
                          color: '#6C6B6E',
                          fontSize: 16,
                          fontFamily: 'Plus Jakarta Sans'
                        }}>
                          Loading image...
                        </div>
                      )}
                      {imageError ? (
                        <div style={{
                          padding: 40,
                          background: 'white',
                          borderRadius: 12,
                          boxShadow: '0 4px 12px rgba(0,0,0,0.1)',
                          textAlign: 'center'
                        }}>
                          <div style={{ fontSize: 64, marginBottom: 20 }}>🖼️</div>
                          <div style={{ fontSize: 18, fontWeight: '600', color: '#32302C', fontFamily: 'Plus Jakarta Sans', marginBottom: 12 }}>
                            Failed to load image
                          </div>
                          <div style={{ fontSize: 14, color: '#6C6B6E', fontFamily: 'Plus Jakarta Sans', marginBottom: 24 }}>
                            {document.filename}
                          </div>
                          <a href={documentUrl} download={document.filename} style={{
                            display: 'inline-block',
                            padding: '12px 24px',
                            background: '#181818',
                            color: 'white',
                            borderRadius: 14,
                            textDecoration: 'none',
                            fontSize: 14,
                            fontWeight: '600',
                            fontFamily: 'Plus Jakarta Sans'
                          }}>
                            Download Image
                          </a>
                        </div>
                      ) : (
                        <img
                          src={documentUrl}
                          alt={document.filename}
                          onLoad={() => setImageLoading(false)}
                          onError={() => {
                            setImageLoading(false);
                            setImageError(true);
                          }}
                          style={{
                            maxWidth: `${zoom}%`,
                            height: 'auto',
                            objectFit: 'contain',
                            borderRadius: 8,
                            boxShadow: '0 4px 12px rgba(0,0,0,0.1)',
                            background: 'white',
                            transition: 'max-width 0.2s ease',
                            display: imageLoading ? 'none' : 'block'
                          }}
                        />
                      )}
                    </div>
                  );

                case 'video':
                  return (
                    <div style={{ maxWidth: '900px', width: '100%' }}>
                      <video
                        src={documentUrl}
                        controls
                        style={{
                          width: '100%',
                          borderRadius: 8,
                          boxShadow: '0 4px 12px rgba(0,0,0,0.1)',
                          background: 'black'
                        }}
                      >
                        Your browser does not support video playback.
                      </video>
                    </div>
                  );

                case 'audio':
                  return (
                    <div style={{
                      background: 'white',
                      padding: 40,
                      borderRadius: 12,
                      boxShadow: '0 4px 12px rgba(0,0,0,0.1)',
                      textAlign: 'center',
                      maxWidth: '500px',
                      width: '100%'
                    }}>
                      <div style={{ fontSize: 48, marginBottom: 20 }}>🎵</div>
                      <div style={{ fontSize: 18, fontWeight: '600', color: '#32302C', fontFamily: 'Plus Jakarta Sans', marginBottom: 20 }}>
                        {document.filename}
                      </div>
                      <audio src={documentUrl} controls style={{ width: '100%' }}>
                        Your browser does not support audio playback.
                      </audio>
                    </div>
                  );

                case 'text':
                case 'code':
                  return <TextCodePreview url={documentUrl} document={document} zoom={zoom} />;

                case 'archive':
                  return (
                    <div style={{
                      background: 'white',
                      padding: 40,
                      borderRadius: 12,
                      boxShadow: '0 4px 12px rgba(0,0,0,0.1)',
                      textAlign: 'center',
                      maxWidth: '500px',
                      width: '100%'
                    }}>
                      <div style={{ fontSize: 64, marginBottom: 20 }}>📦</div>
                      <div style={{ fontSize: 18, fontWeight: '600', color: '#32302C', fontFamily: 'Plus Jakarta Sans', marginBottom: 12 }}>
                        Archive File
                      </div>
                      <div style={{ fontSize: 14, color: '#6C6B6E', fontFamily: 'Plus Jakarta Sans', marginBottom: 24 }}>
                        {document.filename}
                      </div>
                      <div style={{
                        padding: 12,
                        background: '#F5F5F5',
                        borderRadius: 6,
                        fontSize: 14,
                        color: '#6C6B6E',
                        marginBottom: 20
                      }}>
                        Archive files cannot be previewed. Download to extract contents.
                      </div>
                      <a href={documentUrl} download={document.filename} style={{
                        display: 'inline-block',
                        padding: '12px 24px',
                        background: '#181818',
                        color: 'white',
                        borderRadius: 8,
                        textDecoration: 'none',
                        fontSize: 14,
                        fontWeight: '600',
                        fontFamily: 'Plus Jakarta Sans'
                      }}>
                        Download File
                      </a>
                    </div>
                  );

                default:
                  return (
                    <div style={{
                      background: 'white',
                      padding: 40,
                      borderRadius: 12,
                      boxShadow: '0 4px 12px rgba(0,0,0,0.1)',
                      textAlign: 'center',
                      maxWidth: '500px',
                      width: '100%'
                    }}>
                      <div style={{ fontSize: 64, marginBottom: 20 }}>📄</div>
                      <div style={{ fontSize: 18, fontWeight: '600', color: '#32302C', fontFamily: 'Plus Jakarta Sans', marginBottom: 12 }}>
                        Preview Not Available
                      </div>
                      <div style={{ fontSize: 14, color: '#6C6B6E', fontFamily: 'Plus Jakarta Sans', marginBottom: 24 }}>
                        {document.filename}
                      </div>
                      <div style={{
                        padding: 12,
                        background: '#F5F5F5',
                        borderRadius: 6,
                        fontSize: 14,
                        color: '#6C6B6E',
                        marginBottom: 20
                      }}>
                        This file type cannot be previewed in the browser.
                      </div>
                      <a href={documentUrl} download={document.filename} style={{
                        display: 'inline-block',
                        padding: '12px 24px',
                        background: '#181818',
                        color: 'white',
                        borderRadius: 8,
                        textDecoration: 'none',
                        fontSize: 14,
                        fontWeight: '600',
                        fontFamily: 'Plus Jakarta Sans'
                      }}>
                        Download File
                      </a>
                    </div>
                  );
              }
            })()
          ) : (
            <div style={{
              width: '100%',
              height: '100%',
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'center',
              color: '#6C6B6E',
              fontSize: 16,
              fontFamily: 'Plus Jakarta Sans'
            }}>
              Loading document...
            </div>
          )}
        </div>
      </div>

      {/* Ask Koda Floating Button */}
      {showAskKoda && (
        <div style={{ width: 277, height: 82, right: 20, bottom: 20, position: 'absolute' }}>
          {/* Close button */}
          <button
            onClick={(e) => {
              e.stopPropagation();
              setShowAskKoda(false);
            }}
            style={{
              width: 24,
              height: 24,
              right: 0,
              top: 0,
              position: 'absolute',
              background: 'white',
              borderRadius: 100,
              outline: '1px rgba(55, 53, 47, 0.09) solid',
              outlineOffset: '-1px',
              justifyContent: 'center',
              alignItems: 'center',
              display: 'inline-flex',
              border: 'none',
              cursor: 'pointer',
              zIndex: 10
            }}
          >
            <div style={{ width: 12, height: 12, position: 'relative', overflow: 'hidden' }}>
              <XCloseIcon style={{ width: 12, height: 12, position: 'absolute', left: 0, top: 0 }} />
            </div>
          </button>
          <div style={{ width: 14, height: 14, right: 44, top: 9, position: 'absolute', background: '#171717', borderRadius: 9999 }} />
          <button
            onClick={() => navigate(`/chat?documentId=${documentId}`)}
            style={{
              padding: 8,
              bottom: 0,
              right: 0,
              position: 'absolute',
              background: '#171717',
              borderRadius: 100,
              justifyContent: 'flex-start',
              alignItems: 'center',
              gap: 10,
              display: 'inline-flex',
              border: 'none',
              cursor: 'pointer',
              transition: 'transform 0.2s ease, box-shadow 0.2s ease',
              boxShadow: '0 4px 12px rgba(0, 0, 0, 0.3)'
            }}
            onMouseEnter={(e) => {
              e.currentTarget.style.transform = 'translateY(-2px)';
              e.currentTarget.style.boxShadow = '0 6px 16px rgba(0, 0, 0, 0.4)';
            }}
            onMouseLeave={(e) => {
              e.currentTarget.style.transform = 'translateY(0)';
              e.currentTarget.style.boxShadow = '0 4px 12px rgba(0, 0, 0, 0.3)';
            }}
          >
            <div style={{ justifyContent: 'flex-start', alignItems: 'center', gap: 12, display: 'flex' }}>
              <div style={{
                width: 50,
                height: 50,
                padding: 8,
                background: 'white',
                borderRadius: 100,
                justifyContent: 'center',
                alignItems: 'center',
                display: 'flex',
                flexShrink: 0
              }}>
                <img
                  src={logoSvg}
                  alt="Koda"
                  style={{
                    width: '100%',
                    height: '100%',
                    objectFit: 'contain',
                    imageRendering: '-webkit-optimize-contrast',
                    WebkitFontSmoothing: 'antialiased',
                    MozOsxFontSmoothing: 'grayscale'
                  }}
                />
              </div>
              <div style={{ textAlign: 'center', color: 'white', fontSize: 14, fontFamily: 'Plus Jakarta Sans', fontWeight: '500', lineHeight: '22px', wordWrap: 'break-word' }}>Ask Koda about this document</div>
            </div>
          </button>
          <div style={{ width: 7, height: 7, right: 33, top: 0, position: 'absolute', background: '#171717', borderRadius: 9999 }} />
        </div>
      )}
      <NotificationPanel
        showNotificationsPopup={showNotificationsPopup}
        setShowNotificationsPopup={setShowNotificationsPopup}
      />

      {/* Search Modal */}
      {showSearchModal && (
        <SearchInDocumentModal
          documentId={documentId}
          document={document}
          onClose={() => setShowSearchModal(false)}
        />
      )}

      {/* Share Modal */}
      {showShareModal && (
        <div
          onClick={() => setShowShareModal(false)}
          style={{
            position: 'fixed',
            top: 0,
            left: 0,
            width: '100%',
            height: '100%',
            background: 'rgba(0, 0, 0, 0.5)',
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            zIndex: 2000
          }}
        >
          <div
            onClick={(e) => e.stopPropagation()}
            style={{
              background: 'white',
              borderRadius: 16,
              padding: 32,
              width: 500,
              maxWidth: '90%',
              boxShadow: '0 20px 60px rgba(0, 0, 0, 0.3)'
            }}
          >
            <div style={{ fontSize: 20, fontWeight: '700', fontFamily: 'Plus Jakarta Sans', color: '#323232', marginBottom: 8 }}>
              Share Document
            </div>
            <div style={{ fontSize: 14, fontFamily: 'Plus Jakarta Sans', color: '#6C6B6E', marginBottom: 24 }}>
              {document.filename}
            </div>
            <div style={{ marginBottom: 16 }}>
              <label style={{ display: 'block', fontSize: 14, fontWeight: '600', fontFamily: 'Plus Jakarta Sans', color: '#323232', marginBottom: 8 }}>
                Email Address
              </label>
              <input
                type="email"
                value={shareEmail}
                onChange={(e) => setShareEmail(e.target.value)}
                placeholder="Enter email address..."
                style={{
                  width: '100%',
                  padding: '12px 16px',
                  borderRadius: 8,
                  border: '1px solid #E6E6EC',
                  fontSize: 14,
                  fontFamily: 'Plus Jakarta Sans',
                  outline: 'none'
                }}
              />
            </div>
            <div style={{ display: 'flex', gap: 12, marginBottom: 16, paddingBottom: 16, borderBottom: '1px solid #E6E6EC' }}>
              <button
                onClick={() => {
                  setShowShareModal(false);
                  setShareEmail('');
                }}
                style={{
                  padding: '12px 24px',
                  borderRadius: 14,
                  border: '1px solid #E6E6EC',
                  background: 'white',
                  color: '#323232',
                  fontSize: 14,
                  fontWeight: '600',
                  fontFamily: 'Plus Jakarta Sans',
                  cursor: 'pointer'
                }}
              >
                Cancel
              </button>
              <button
                onClick={async () => {
                  if (!shareEmail.trim()) {
                    alert('Please enter an email address');
                    return;
                  }
                  setSendingEmail(true);
                  try {
                    await api.post(`/api/documents/${documentId}/share`, {
                      email: shareEmail
                    });
                    alert(`Document shared with ${shareEmail}`);
                    setShowShareModal(false);
                    setShareEmail('');
                  } catch (error) {
                    console.error('Error sharing document:', error);
                    alert('Failed to send email: ' + (error.response?.data?.error || error.message));
                  } finally {
                    setSendingEmail(false);
                  }
                }}
                disabled={sendingEmail}
                style={{
                  padding: '12px 24px',
                  borderRadius: 14,
                  border: 'none',
                  background: sendingEmail ? '#999' : '#181818',
                  color: 'white',
                  fontSize: 14,
                  fontWeight: '600',
                  fontFamily: 'Plus Jakarta Sans',
                  cursor: sendingEmail ? 'not-allowed' : 'pointer',
                  marginLeft: 'auto'
                }}
              >
                {sendingEmail ? 'Sending...' : 'Send Email'}
              </button>
            </div>
            <div style={{ display: 'flex', justifyContent: 'center' }}>
              <button
                onClick={() => {
                  if (documentUrl && document) {
                    const link = window.document.createElement('a');
                    link.href = documentUrl;
                    link.download = document.filename;
                    window.document.body.appendChild(link);
                    link.click();
                    window.document.body.removeChild(link);
                  }
                }}
                style={{
                  padding: '12px 24px',
                  borderRadius: 14,
                  border: '1px solid #E6E6EC',
                  background: 'white',
                  color: '#323232',
                  fontSize: 14,
                  fontWeight: '600',
                  fontFamily: 'Plus Jakarta Sans',
                  cursor: 'pointer',
                  display: 'flex',
                  alignItems: 'center',
                  gap: 8
                }}
              >
                <DownloadIcon style={{ width: 20, height: 20 }} />
                Download Document
              </button>
            </div>

            <div style={{
              borderTop: '1px solid #E6E6EC',
              marginTop: 20,
              paddingTop: 20
            }}>
              <div style={{
                fontSize: 16,
                fontWeight: '600',
                color: '#32302C',
                marginBottom: 12,
                fontFamily: 'Plus Jakarta Sans'
              }}>
                Export Document
              </div>

              <div style={{
                display: 'flex',
                flexDirection: 'column',
                gap: 10
              }}>
                <button
                  onClick={() => handleExport('pdf')}
                  style={{
                    width: '100%',
                    padding: 12,
                    background: 'white',
                    border: '1px solid #E6E6EC',
                    borderRadius: 8,
                    fontSize: 14,
                    fontWeight: '500',
                    color: '#32302C',
                    cursor: 'pointer',
                    transition: 'all 0.2s',
                    fontFamily: 'Plus Jakarta Sans',
                    display: 'flex',
                    alignItems: 'center',
                    justifyContent: 'center',
                    gap: 8
                  }}
                  onMouseEnter={(e) => {
                    e.target.style.background = '#F9FAFB';
                    e.target.style.borderColor = '#D1D5DB';
                  }}
                  onMouseLeave={(e) => {
                    e.target.style.background = 'white';
                    e.target.style.borderColor = '#E6E6EC';
                  }}
                >
                  <img src={pdfIcon} alt="PDF" style={{ width: 30, height: 30, display: 'block' }} />
                  Export as PDF
                </button>

                <button
                  onClick={() => handleExport('docx')}
                  style={{
                    width: '100%',
                    padding: 12,
                    background: 'white',
                    border: '1px solid #E6E6EC',
                    borderRadius: 8,
                    fontSize: 14,
                    fontWeight: '500',
                    color: '#32302C',
                    cursor: 'pointer',
                    transition: 'all 0.2s',
                    fontFamily: 'Plus Jakarta Sans',
                    display: 'flex',
                    alignItems: 'center',
                    justifyContent: 'center',
                    gap: 8
                  }}
                  onMouseEnter={(e) => {
                    e.target.style.background = '#F9FAFB';
                    e.target.style.borderColor = '#D1D5DB';
                  }}
                  onMouseLeave={(e) => {
                    e.target.style.background = 'white';
                    e.target.style.borderColor = '#E6E6EC';
                  }}
                >
                  <img src={docIcon} alt="DOCX" style={{ width: 30, height: 30, display: 'block' }} />
                  Export as DOCX
                </button>

                {(document.mimeType.includes('spreadsheet') || document.mimeType.includes('excel')) && (
                  <button
                    onClick={() => handleExport('xlsx')}
                    style={{
                      width: '100%',
                      padding: 12,
                      background: 'white',
                      border: '1px solid #E6E6EC',
                      borderRadius: 8,
                      fontSize: 14,
                      fontWeight: '500',
                      color: '#32302C',
                      cursor: 'pointer',
                      transition: 'all 0.2s',
                      fontFamily: 'Plus Jakarta Sans',
                      display: 'flex',
                      alignItems: 'center',
                      justifyContent: 'center',
                      gap: 8
                    }}
                    onMouseEnter={(e) => {
                      e.target.style.background = '#F9FAFB';
                      e.target.style.borderColor = '#D1D5DB';
                    }}
                    onMouseLeave={(e) => {
                      e.target.style.background = 'white';
                      e.target.style.borderColor = '#E6E6EC';
                    }}
                  >
                    <img src={xlsIcon} alt="Excel" style={{ width: 30, height: 30, display: 'block' }} />
                    Export as Excel
                  </button>
                )}
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Delete Confirmation Modal */}
      <DeleteConfirmationModal
        isOpen={showDeleteModal}
        onClose={() => setShowDeleteModal(false)}
        onConfirm={async () => {
          try {
            await api.delete(`/api/documents/${documentId}`);
            alert('Document deleted successfully');
            navigate('/documents');
          } catch (error) {
            console.error('Error deleting document:', error);
            alert('Failed to delete document: ' + (error.response?.data?.error || error.message));
          }
        }}
        itemName={document.filename}
      />

      {/* Category Modal */}
      {showCategoryModal && (
        <div
          onClick={() => setShowCategoryModal(false)}
          style={{
            position: 'fixed',
            top: 0,
            left: 0,
            width: '100%',
            height: '100%',
            background: 'rgba(0, 0, 0, 0.5)',
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            zIndex: 2000
          }}
        >
          <div
            onClick={(e) => e.stopPropagation()}
            style={{
              background: 'white',
              borderRadius: 16,
              padding: 32,
              width: 500,
              maxWidth: '90%',
              maxHeight: '80vh',
              overflow: 'auto',
              boxShadow: '0 20px 60px rgba(0, 0, 0, 0.3)'
            }}
          >
            <div style={{ fontSize: 20, fontWeight: '700', fontFamily: 'Plus Jakarta Sans', color: '#323232', marginBottom: 8 }}>
              Move to Category
            </div>
            <div style={{ fontSize: 14, fontFamily: 'Plus Jakarta Sans', color: '#6C6B6E', marginBottom: 24 }}>
              {document.filename}
            </div>

            {/* Create New Category */}
            <div style={{ marginBottom: 24, paddingBottom: 24, borderBottom: '1px solid #E6E6EC' }}>
              <div style={{ fontSize: 16, fontWeight: '600', fontFamily: 'Plus Jakarta Sans', color: '#323232', marginBottom: 12 }}>
                Create New Category
              </div>
              <div style={{ display: 'flex', gap: 8 }}>
                <input
                  type="text"
                  value={newCategoryName}
                  onChange={(e) => setNewCategoryName(e.target.value)}
                  placeholder="Category name..."
                  style={{
                    flex: 1,
                    padding: '12px 16px',
                    borderRadius: 8,
                    border: '1px solid #E6E6EC',
                    fontSize: 14,
                    fontFamily: 'Plus Jakarta Sans',
                    outline: 'none'
                  }}
                />
                <button
                  onClick={async () => {
                    if (!newCategoryName.trim()) {
                      alert('Please enter a category name');
                      return;
                    }
                    try {
                      const createResponse = await api.post('/api/folders', { name: newCategoryName });
                      const newCategory = createResponse.data.folder;

                      // Move document to new category
                      await api.patch(`/api/documents/${documentId}`, {
                        folderId: newCategory.id
                      });

                      alert('Document moved to new category successfully');
                      setShowCategoryModal(false);
                      setNewCategoryName('');

                      // Refresh categories
                      const response = await api.get('/api/folders');
                      setCategories(response.data.folders || []);
                    } catch (error) {
                      console.error('Error creating category:', error);
                      alert('Failed to create category: ' + (error.response?.data?.error || error.message));
                    }
                  }}
                  style={{
                    padding: '12px 24px',
                    borderRadius: 8,
                    border: 'none',
                    background: '#181818',
                    color: 'white',
                    fontSize: 14,
                    fontWeight: '600',
                    fontFamily: 'Plus Jakarta Sans',
                    cursor: 'pointer'
                  }}
                >
                  Create
                </button>
              </div>
            </div>

            {/* Select Existing Category */}
            <div style={{ marginBottom: 24 }}>
              <div style={{ fontSize: 16, fontWeight: '600', fontFamily: 'Plus Jakarta Sans', color: '#323232', marginBottom: 12 }}>
                Or Select Existing Category
              </div>
              <div style={{ display: 'flex', flexDirection: 'column', gap: 8, maxHeight: 300, overflow: 'auto' }}>
                {categories.length === 0 ? (
                  <div style={{ padding: 16, textAlign: 'center', color: '#6C6B6E', fontSize: 14, fontFamily: 'Plus Jakarta Sans' }}>
                    No categories available. Create one above.
                  </div>
                ) : (
                  categories.map((category) => (
                    <div
                      key={category.id}
                      onClick={() => setSelectedCategory(category.id)}
                      style={{
                        padding: 12,
                        borderRadius: 8,
                        border: selectedCategory === category.id ? '2px solid #181818' : '1px solid #E6E6EC',
                        cursor: 'pointer',
                        display: 'flex',
                        alignItems: 'center',
                        gap: 12,
                        background: selectedCategory === category.id ? '#F9FAFB' : 'white',
                        transition: 'all 0.2s ease'
                      }}
                    >
                      <img src={folderIcon} alt="Folder" style={{ width: 24, height: 24 }} />
                      <div style={{ fontSize: 14, fontWeight: '600', fontFamily: 'Plus Jakarta Sans', color: '#323232' }}>
                        {category.name}
                      </div>
                    </div>
                  ))
                )}
              </div>
            </div>

            <div style={{ display: 'flex', gap: 12, justifyContent: 'flex-end' }}>
              <button
                onClick={() => {
                  setShowCategoryModal(false);
                  setSelectedCategory(null);
                  setNewCategoryName('');
                }}
                style={{
                  padding: '12px 24px',
                  borderRadius: 14,
                  border: '1px solid #E6E6EC',
                  background: 'white',
                  color: '#323232',
                  fontSize: 14,
                  fontWeight: '600',
                  fontFamily: 'Plus Jakarta Sans',
                  cursor: 'pointer'
                }}
              >
                Cancel
              </button>
              <button
                onClick={async () => {
                  if (!selectedCategory) {
                    alert('Please select a category');
                    return;
                  }
                  try {
                    await api.patch(`/api/documents/${documentId}`, {
                      folderId: selectedCategory
                    });
                    alert('Document moved successfully');
                    setShowCategoryModal(false);
                    setSelectedCategory(null);
                  } catch (error) {
                    console.error('Error moving document:', error);
                    alert('Failed to move document: ' + (error.response?.data?.error || error.message));
                  }
                }}
                disabled={!selectedCategory}
                style={{
                  padding: '12px 24px',
                  borderRadius: 14,
                  border: 'none',
                  background: selectedCategory ? '#181818' : '#999',
                  color: 'white',
                  fontSize: 14,
                  fontWeight: '600',
                  fontFamily: 'Plus Jakarta Sans',
                  cursor: selectedCategory ? 'pointer' : 'not-allowed'
                }}
              >
                Move to Category
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default DocumentViewer;
